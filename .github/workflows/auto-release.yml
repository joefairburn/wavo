name: Auto Release

on:
  push:
    branches: [main]
    paths: ['package.json']

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      new-version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Need previous commit to compare

      - name: Check if version changed
        id: check
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          
          # Get previous version
          git checkout HEAD~1 -- package.json
          PREVIOUS_VERSION=$(node -p "require('./package.json').version")
          git checkout HEAD -- package.json
          
          echo "Previous version: $PREVIOUS_VERSION"
          echo "Current version: $CURRENT_VERSION"
          
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

  auto-release:
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run type check
        run: pnpm type-check

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Run tests
        run: pnpm test
        continue-on-error: true

      - name: Build package
        run: pnpm build

      - name: Determine NPM tag
        id: npm-tag
        run: |
          VERSION="${{ needs.check-version.outputs.new-version }}"
          
          if [[ $VERSION =~ -alpha ]]; then
            echo "tag=alpha" >> $GITHUB_OUTPUT
          elif [[ $VERSION =~ -beta ]]; then
            echo "tag=beta" >> $GITHUB_OUTPUT
          elif [[ $VERSION =~ -rc ]]; then
            echo "tag=rc" >> $GITHUB_OUTPUT
          else
            echo "tag=latest" >> $GITHUB_OUTPUT
          fi
          
          echo "Publishing version $VERSION with tag: $(cat $GITHUB_OUTPUT | grep tag= | cut -d'=' -f2)"

      - name: Publish to NPM
        run: |
          echo "Publishing version ${{ needs.check-version.outputs.new-version }} with tag ${{ steps.npm-tag.outputs.tag }}"
          pnpm publish --tag ${{ steps.npm-tag.outputs.tag }} --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.check-version.outputs.new-version }}
          name: Release v${{ needs.check-version.outputs.new-version }}
          body: |
            ## ðŸš€ Auto-release v${{ needs.check-version.outputs.new-version }}
            
            This release was automatically created when the version in `package.json` was updated.
            
            **NPM Tag:** `${{ steps.npm-tag.outputs.tag }}`
            
            ### Install
            ```bash
            npm install wavo@${{ steps.npm-tag.outputs.tag }}
            # or specific version
            npm install wavo@${{ needs.check-version.outputs.new-version }}
            ```
            
            ### Changes
            See the commit history for detailed changes since the last release.
          draft: false
          prerelease: ${{ steps.npm-tag.outputs.tag != 'latest' }}