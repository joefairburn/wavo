name: Publish to NPM

on:
  # Trigger on release creation
  release:
    types: [published]
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (leave empty to use package.json version)'
        required: false
        type: string
      tag:
        description: 'NPM dist-tag (latest, beta, alpha, etc.)'
        required: false
        default: 'latest'
        type: string
      dry_run:
        description: 'Run in dry-run mode (no actual publish)'
        required: false
        default: false
        type: boolean

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run type check
        run: pnpm type-check

      - name: Run tests
        run: pnpm test
        continue-on-error: true # Continue even if tests fail for now

      - name: Build package
        run: pnpm build

      - name: Update version (manual workflow only)
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version }}
        run: |
          echo "Updating version to ${{ github.event.inputs.version }}"
          pnpm version ${{ github.event.inputs.version }} --no-git-tag-version
          
      - name: Get package version
        id: package_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Package version: $VERSION"

      - name: Publish to NPM (dry run)
        if: ${{ github.event.inputs.dry_run == 'true' }}
        run: |
          echo "Running in dry-run mode"
          pnpm publish --dry-run --tag ${{ github.event.inputs.tag || 'latest' }} --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to NPM
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: |
          echo "Publishing to NPM with tag: ${{ github.event.inputs.tag || 'latest' }}"
          pnpm publish --tag ${{ github.event.inputs.tag || 'latest' }} --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub release (if manual trigger)
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != 'true' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.package_version.outputs.VERSION }}
          release_name: Release v${{ steps.package_version.outputs.VERSION }}
          body: |
            ## Changes
            - Published to NPM with tag: ${{ github.event.inputs.tag || 'latest' }}
            - Version: ${{ steps.package_version.outputs.VERSION }}
            
            Install with:
            ```bash
            npm install wavo@${{ github.event.inputs.tag || 'latest' }}
            # or specific version
            npm install wavo@${{ steps.package_version.outputs.VERSION }}
            ```
          draft: false
          prerelease: ${{ github.event.inputs.tag != 'latest' }}